(import (io simple))


(comments "eq?")
(prs
  (eq? 'a 3) 
  (eq? #t 't) 
  (eq? "abc" 'abc) 
  (eq? "hi" '(hi)) 
  (eq? #f '()) 

  (eq? 9/2 7/2) 
  (eq? 3.4 53344) 
  (eq? 3 3.0) 
  (eq? 1/3 #i1/3) 

  (eq? 9/2 9/2) 
  (eq? 3.4 (+ 3.0 .4)) 
  (let ([x (* 12345678987654321 2)])
    (eq? x x)) 

  (eq? #\a #\b) 
  (eq? #\a #\a) 
  (let ([x (string-ref "hi" 0)])
    (eq? x x)) 

  (eq? #t #t) 
  (eq? #f #f) 
  (eq? #t #f) 
  (eq? (null? '()) #t) 
  (eq? (null? '(a)) #f) 

  (eq? (cdr '(a)) '()) 

  (eq? 'a 'a) 
  (eq? 'a 'b) 
  (eq? 'a (string->symbol "a")) 

  (eq? '(a) '(b)) 
  (eq? '(a) '(a)) 
  (let ([x '(a . b)]) (eq? x x)) 
  (let ([x (cons 'a 'b)])
    (eq? x x)) 
  (eq? (cons 'a 'b) (cons 'a 'b)) 

  (eq? "abc" "cba") 
  (eq? "abc" "abc") 
  (let ([x "hi"]) (eq? x x)) 
  (let ([x (string #\h #\i)]) (eq? x x)) 
  (eq? (string #\h #\i)
      (string #\h #\i)) 

  (eq? '#vu8(1) '#vu8(1)) 
  (eq? '#vu8(1) '#vu8(2)) 
  (let ([x (make-bytevector 10 0)])
    (eq? x x)) 
  (let ([x (make-bytevector 10 0)])
    (eq? x (make-bytevector 10 0))) 

  (eq? '#(a) '#(b)) 
  (eq? '#(a) '#(a)) 
  (let ([x '#(a)]) (eq? x x)) 
  (let ([x (vector 'a)])
    (eq? x x)) 
  (eq? (vector 'a) (vector 'a)) 

  (eq? car car) 
  (eq? car cdr) 
  (let ([f (lambda (x) x)])
    (eq? f f)) 
  (let ([f (lambda () (lambda (x) x))])
    (eq? (f) (f))) 
  (eq? (lambda (x) x) (lambda (y) y)) 

  (let ([f (lambda (x)
            (lambda ()
              (set! x (+ x 1))
              x))])
    (eq? (f 0) (f 0))) 
)

(comments "eqv?")
(prs
  (eqv? 'a 3) 
  (eqv? #t 't) 
  (eqv? "abc" 'abc) 
  (eqv? "hi" '(hi)) 
  (eqv? #f '()) 

  (eqv? 9/2 7/2) 
  (eqv? 3.4 53344) 
  (eqv? 3 3.0) 
  (eqv? 1/3 #i1/3) 

  (eqv? 9/2 9/2) 
  (eqv? 3.4 (+ 3.0 .4)) 
  (let ([x (* 12345678987654321 2)])
    (eqv? x x)) 

  (eqv? #\a #\b) 
  (eqv? #\a #\a) 
  (let ([x (string-ref "hi" 0)])
    (eqv? x x)) 

  (eqv? #t #t) 
  (eqv? #f #f) 
  (eqv? #t #f) 
  (eqv? (null? '()) #t) 
  (eqv? (null? '(a)) #f) 

  (eqv? (cdr '(a)) '()) 

  (eqv? 'a 'a) 
  (eqv? 'a 'b) 
  (eqv? 'a (string->symbol "a")) 

  (eqv? '(a) '(b)) 
  (eqv? '(a) '(a)) 
  (let ([x '(a . b)]) (eqv? x x)) 
  (let ([x (cons 'a 'b)])
    (eqv? x x)) 
  (eqv? (cons 'a 'b) (cons 'a 'b)) 

  (eqv? "abc" "cba") 
  (eqv? "abc" "abc") 
  (let ([x "hi"]) (eqv? x x)) 
  (let ([x (string #\h #\i)]) (eqv? x x)) 
  (eqv? (string #\h #\i)
        (string #\h #\i)) 

  (eqv? '#vu8(1) '#vu8(1)) 
  (eqv? '#vu8(1) '#vu8(2)) 
  (let ([x (make-bytevector 10 0)])
    (eqv? x x)) 
  (let ([x (make-bytevector 10 0)])
    (eqv? x (make-bytevector 10 0))) 

  (eqv? '#(a) '#(b)) 
  (eqv? '#(a) '#(a)) 
  (let ([x '#(a)]) (eqv? x x)) 
  (let ([x (vector 'a)])
    (eqv? x x)) 
  (eqv? (vector 'a) (vector 'a)) 

  (eqv? car car) 
  (eqv? car cdr) 
  (let ([f (lambda (x) x)])
    (eqv? f f)) 
  (let ([f (lambda () (lambda (x) x))])
    (eqv? (f) (f))) 
  (eqv? (lambda (x) x) (lambda (y) y)) 

  (let ([f (lambda (x)
            (lambda ()
              (set! x (+ x 1))
              x))])
    (eqv? (f 0) (f 0))) 
)

(comments "equal")
(prs
  (equal? 'a 3) 
  (equal? #t 't) 
  (equal? "abc" 'abc) 
  (equal? "hi" '(hi)) 
  (equal? #f '()) 

  (equal? 9/2 7/2) 
  (equal? 3.4 53344) 
  (equal? 3 3.0) 
  (equal? 1/3 #i1/3) 

  (equal? 9/2 9/2) 
  (equal? 3.4 (+ 3.0 .4)) 
  (let ([x (* 12345678987654321 2)])
    (equal? x x)) 

  (equal? #\a #\b) 
  (equal? #\a #\a) 
  (let ([x (string-ref "hi" 0)])
    (equal? x x)) 

  (equal? #t #t) 
  (equal? #f #f) 
  (equal? #t #f) 
  (equal? (null? '()) #t) 
  (equal? (null? '(a)) #f) 

  (equal? (cdr '(a)) '()) 

  (equal? 'a 'a) 
  (equal? 'a 'b) 
  (equal? 'a (string->symbol "a")) 

  (equal? '(a) '(b)) 
  (equal? '(a) '(a)) 
  (let ([x '(a . b)]) (equal? x x)) 
  (let ([x (cons 'a 'b)])
    (equal? x x)) 
  (equal? (cons 'a 'b) (cons 'a 'b)) 

  (equal? "abc" "cba") 
  (equal? "abc" "abc") 
  (let ([x "hi"]) (equal? x x)) 
  (let ([x (string #\h #\i)]) (equal? x x)) 
  (equal? (string #\h #\i)
          (string #\h #\i)) 

  (equal? '#vu8(1) '#vu8(1)) 
  (equal? '#vu8(1) '#vu8(2)) 
  (let ([x (make-bytevector 10 0)])
    (equal? x x)) 
  (let ([x (make-bytevector 10 0)])
    (equal? x (make-bytevector 10 0))) 

  (equal? '#(a) '#(b)) 
  (equal? '#(a) '#(a)) 
  (let ([x '#(a)]) (equal? x x)) 
  (let ([x (vector 'a)])
    (equal? x x)) 
  (equal? (vector 'a) (vector 'a)) 

  (equal? car car) 
  (equal? car cdr) 
  (let ([f (lambda (x) x)])
    (equal? f f)) 
  (let ([f (lambda () (lambda (x) x))])
    (equal? (f) (f))) 
  (equal? (lambda (x) x) (lambda (y) y)) 

  (let ([f (lambda (x)
            (lambda ()
              (set! x (+ x 1))
              x))])
    (equal? (f 0) (f 0))) 

  (equal?
    (let ([x (cons 'x 'x)])
      (set-car! x x)
      (set-cdr! x x)
      x)
    (let ([x (cons 'x 'x)])
      (set-car! x x)
      (set-cdr! x x)
      (cons x x))) 
)


(exit)