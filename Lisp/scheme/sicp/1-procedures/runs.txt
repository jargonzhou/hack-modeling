# 1-1-elements.ss

;;; expressions      
486 ;=> 486
(+ 137 349) ;=> 486  
(- 1000 334) ;=> 666 
(* 5 99) ;=> 495     
(/ 10 5) ;=> 2       
(+ 2.7 10) ;=> 12.7  
(+ 21 35 12 7) ;=> 75
(* 25 4 12) ;=> 1200 
(+ (* 3 5) (- 10 6)) ;=> 19
(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) ;=> 57


;;; naming
size ;=> 2
(* 5 size) ;=> 10

(* pi (* radius radius)) ;=> 314.159

circumference ;=> 62.8318


;;; compound procedures
(square 21) ;=> 441
(square (+ 2 5)) ;=> 49
(square (square 3)) ;=> 81

(sum-of-squares 3 4) ;=> 25

(f 5) ;=> 136


;;; conditional expressions, predicates
(abs -1) ;=> 1
(abs 0) ;=> 0
(abs 1) ;=> 1

(and (> x 5) (< x 10)) ;=> #t

(ge 1 2) ;=> #f
(ge 2 1) ;=> #t


;;; square roots by Newton's method
sqrt ;=> #<procedure sqrt at 1-1-elements.ss:1104>
square ;=> #<procedure square at 1-1-elements.ss:479>
(sqrt 9) ;=> 3.00009155413138
(sqrt (+ 100 37)) ;=> 11.704699917758145
(sqrt (+ (sqrt 2) (sqrt 3))) ;=> 1.7739279023207892
(square (sqrt 1000)) ;=> 1000.000369924366


;;; procedures as black-box abstractions
sqrt2 ;=> #<procedure sqrt2 at 1-1-elements.ss:1605>
square ;=> #<procedure square at 1-1-elements.ss:479>
(sqrt2 9) ;=> 3.00009155413138
(sqrt2 (+ 100 37)) ;=> 11.704699917758145
(sqrt2 (+ (sqrt2 2) (sqrt2 3))) ;=> 1.7739279023207892
(square (sqrt2 1000)) ;=> 1000.000369924366

# 1-2-processes.ss

;;; linear recursion, iteration
|(factorial-r 6)
| (factorial-r 5)
| |(factorial-r 4)
| | (factorial-r 3)
| | |(factorial-r 2)
| | | (factorial-r 1)
| | | 1
| | |2
| | 6
| |24
| 120
|720

|(factorial-i 6)
|(fact-iter 1 1 6)
|(fact-iter 1 2 6)
|(fact-iter 2 3 6)
|(fact-iter 6 4 6)
|(fact-iter 24 5 6)
|(fact-iter 120 6 6)
|(fact-iter 720 7 6)
|720

;;; tree recursion
|(fib-r 5)
| (fib-r 4)
| |(fib-r 3)
| | (fib-r 2)
| | |(fib-r 1)
| | |1
| | |(fib-r 0)
| | |0
| | 1
| | (fib-r 1)
| | 1
| |2
| |(fib-r 2)
| | (fib-r 1)
| | 1
| | (fib-r 0)
| | 0
| |1
| 3
| (fib-r 3)
| |(fib-r 2)
| | (fib-r 1)
| | 1
| | (fib-r 0)
| | 0
| |1
| |(fib-r 1)
| |1
| 2
|5
|(fib-i 5)
|(fib-iter 1 0 5)
|(fib-iter 1 1 4)
|(fib-iter 2 1 3)
|(fib-iter 3 2 2)
|(fib-iter 5 3 1)
|(fib-iter 8 5 0)
|5

;;; count changes
(count-change 100) ;=> 292


;;; exponentiation
(expt-r 2 10) ;=> 1024
(expt-i 2 10) ;=> 1024
(fast-expt 2 10) ;=> 1024


;;; GCD
(gcd 206 40) ;=> 2


;;; testing for primality
(prime? 100001651) ;=> #t
(fast-prime? 100001651 10) ;=> #t

# 1-3-high-order-procedures.ss

;;; procedures as arguments
(sum-cubes 1 10) ;=> 3025
(sum-integers 1 10) ;=> 55

(* 8 (pi-sum 1 1000)) ;=> 3.139592655589783     

(integral cube 0 1 0.01) ;=> 0.24998750000000042
(integral cube 0 1 0.001) ;=> 0.249999875000001 


;;; construct procedures using lambda
(lambda (x) (+ x 4)) ;=> #<procedure at 1-3-high-order-procedures.ss:1072>
(lambda (x) (/ 1.0 (* x (+ x 2)))) ;=> #<procedure at 1-3-high-order-procedures.ss:1096>

(* 8 (pi-sum 1 1000)) ;=> 3.139592655589783
(integral cube 0 1 0.01) ;=> 0.24998750000000042

((lambda (x y z) (+ x y (square z))) 1 2 3) ;=> 12

(f 1 2) ;=> 54


;;; procedure as general methods
(half-interval-method sin 2.0 4.0) ;=> 3.14111328125
(half-interval-method (lambda (x) (- (* x x x) (* 2 x) 3)) 1.0 2.0) ;=> 1.89306640625

(fixed-point cos 1.0) ;=> 0.7390822985224023
(fixed-point (lambda (y) (+ (sin y) (cos y))) 1.0) ;=> 1.2587315962971173

(sqrt (+ 100 37)) ;=> 11.704699910719626
(sqrt (+ (sqrt 2) (sqrt 3))) ;=> 1.7737712281868727


;;; procedures as returned values
(sqrt (+ 100 37)) ;=> 11.704699910719626
(sqrt (+ (sqrt 2) (sqrt 3))) ;=> 1.7737712281868727

((deriv cube) 5) ;=> 75.00014999664018

(sqrt (+ 100 37)) ;=> 11.704699910719627
(sqrt (+ (sqrt 2) (sqrt 3))) ;=> 1.7737712281890188

(sqrt (+ 100 37)) ;=> 11.704699910719626
(sqrt (+ (sqrt 2) (sqrt 3))) ;=> 1.7737712281868727
